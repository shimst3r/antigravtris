pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
function _init()
	state={}
	state.grid=new_grid()
	state.phase="start"
end

function init_demo()
 state.lines=1
 state.level=0
 state.time=0

 active_piece=new_piece(1,5,"z")
 state.active_piece=active_piece
 
 shape=random_shape("z")
 next_piece=new_piece(12,12,shape)
 state.next_piece=next_piece
 
 grid=new_grid()
 grid[12][3]=colors["grey"]
 grid[12][6]=colors["yellow"]
 grid[13][1]=colors["blue"]
 grid[13][2]=colors["grey"]
 grid[13][3]=colors["grey"]
 grid[13][6]=colors["yellow"]
 grid[13][7]=colors["yellow"]
 grid[13][9]=colors["pink"]
 grid[14][1]=colors["blue"]
 grid[14][2]=colors["grey"]
 grid[14][3]=colors["purple"]
 grid[14][4]=colors["purple"]
 grid[14][6]=colors["green"]
 grid[14][7]=colors["yellow"]
 grid[14][9]=colors["pink"]
 grid[15][1]=colors["blue"]
 grid[15][2]=colors["blue"]
 grid[15][3]=colors["purple"]
 grid[15][4]=colors["purple"]
 grid[15][5]=colors["green"]
 grid[15][6]=colors["green"]
 grid[15][7]=colors["green"]
 grid[15][8]=colors["pink"]
 grid[15][9]=colors["pink"]
 state.grid=grid
 
 state.phase="running"
end

function init_game()
 state.lines=0
 state.level=0
 state.time=0

 shape=random_shape("")
 active_piece=new_piece(1,5,shape)
 state.active_piece=active_piece
 
 shape=random_shape(state.active_piece.shape)
 next_piece=new_piece(13,13,shape)
 state.next_piece=next_piece
 
 grid=new_grid()
 state.grid=grid
 
 state.phase="running"

end

function init_gameover()
 state={}
 state.grid=new_grid()
 state.phase="gameover"
end
-->8
function _update()
 if state.phase=="start" then
  if btnp(‚ùé) then
   init_game()
  end
 elseif state.phase=="running" then
  state=update_game(state)
 elseif state.phase=="gameover" then
  state.grid=new_grid()
  if btnp(‚ùé) then
   init_game()
  end
 end
end

function update_ap(state)
 local ap=state.active_piece
 if btnp(‚¨ÖÔ∏è) then
  ap=move_left(ap,state.grid)
 elseif btnp(‚û°Ô∏è) then
  ap=move_right(ap,state.grid)
 elseif btnp(‚¨áÔ∏è) then
  ap=move_down(ap,state.grid)
 elseif btnp(‚ùé) then
  candidate=rotate_clockwise(ap,state.grid)
  if can_rotate(candidate,state.grid) then
   ap=candidate
  end
 elseif btnp(üÖæÔ∏è) then
  candidate=rotate_counterclockwise(ap,state.grid)
  if can_rotate(candidate,state.grid) then
   ap=candidate
  end
 else
  ap=drop(state)
 end
 return ap
end

function update_game(state)
 local _state=state
 if collision(state.active_piece,state.grid,‚¨áÔ∏è) then
  if state.active_piece.debounce==nil then
   _state.active_piece.debounce=5
   _state.active_piece=update_ap(state)
  elseif state.active_piece.debounce>0 then
   _state.active_piece.debounce-=1
   _state.active_piece=update_ap(state)
  else
   local bottom=get_bottom_block(state.active_piece)
   local top=get_top_row(state.grid,state.active_piece.col)
   if bottom.row<=top then
    _state.phase="gameover"
   else
    _state=update_pieces(state)
   end
  end
 else
  _state.active_piece=update_ap(state)
 end
 _state.time+=1
 return _state
end

function update_pieces(state)
 local _state=state
 _state.grid=persist(state.active_piece,state.grid)
 _state.grid,_state.lines=delete_lines(state)
 
 if _state.lines>10*_state.level then
  _state.level=min(9,_state.level+1)
 end
	local active_piece=new_piece(1,5,state.next_piece.shape)
 local next_shape=random_shape(state.next_piece.shape)
 local next_piece=new_piece(13,13,next_shape)
 _state.active_piece=active_piece
 _state.next_piece=next_piece
 
 return _state
end
-->8
function _draw()
 cls(0)
 if state.phase=="start" then
  draw_start()
 else
  draw_ui(state)
  draw_grid(state.grid)
  draw_piece(state.next_piece)
  if state.phase=="running" then
   draw_piece(state.active_piece)
  elseif state.phase=="gameover" then
   draw_gameover()
  end
 end
end

function draw_block(row,col,sprite)
 xs=8*(col-1)
 ys=8*row
 spr(sprite,xs,ys)
end

function draw_gameover()
  for row=5,7 do
   for col=2,9 do
    draw_block(row,col,16)
   end
  end
  for row=10,11 do
   for col=3,8 do
    draw_block(row,col,16)
   end
  end
  print("press ‚ùé to\nplay again",2*8+2,10*8+2,6)
  draw_block(5,2,17)
  draw_block(5,3,18)
  draw_block(5,4,19)
  draw_block(5,5,20)
  draw_block(7,6,21)
  draw_block(7,7,22)
  draw_block(7,8,23)
  draw_block(7,9,24)
end

function draw_grid(grid)
 for y,row in pairs(grid) do
  for x,c in pairs(row) do
   draw_block(y,x,c)
  end
 end
end

function draw_piece(p)
 for b in all(p) do
  draw_block(b.row,b.col,colors[b.clr])
 end
end

function draw_start()
  draw_block(4,2,33)
  draw_block(4,3,34)
  draw_block(4,4,35)
  draw_block(4,5,36)
  draw_block(6,6,37)
  draw_block(6,7,38)
  draw_block(6,8,39)
  draw_block(6,9,40)
  draw_block(8,10,41)
  draw_block(8,11,42)
  draw_block(8,12,43)
  draw_block(8,13,44)
  print("press ‚ùé to play",3*8+2,11*8+2,6)

end


function draw_ui(state)
 print("level",88,17)
 print(state.level,88,25)

 print("lines",88,41)
 print(state.lines,88,49)
 
 local seconds=flr(state.time/30)
 print("time",88,65)
 print(seconds,88,73)
 
	print("next",88,89)
end
-->8
colors={
 blue=1,
 purple=2,
 green=3,
 brown=4,
 grey=5,
 yellow=6,
 pink=7,
 blank=8,
 down=9,
 up=10,
}

pieces={
 i={
  [1]=function (row,col) return {shape="i",position=1,[1]={row=row,col=col-1,clr="brown"},[2]={row=row,col=col,clr="brown"},[3]={row=row,col=col+1,clr="brown"},[4]={row=row,col=col+2,clr="brown"}} end,
  [2]=function (row,col) return {shape="i",position=2,[1]={row=row-1,col=col,clr="brown"},[2]={row=row,col=col,clr="brown"},[3]={row=row+1,col=col,clr="brown"},[4]={row=row+2,col=col,clr="brown"}} end,
 },
 o={
  [1]=function (row,col) return {shape="o",position=1,[1]={row=row,col=col-1,clr="purple"},[2]={row=row,col=col,clr="purple"},[3]={row=row+1,col=col-1,clr="purple"},[4]={row=row+1,col=col,clr="purple"}} end,
 },
 t={
  [1]=function (row,col) return {shape="t",position=1,[1]={row=row,col=col-1,clr="green"},[2]={row=row,col=col,clr="green"},[3]={row=row,col=col+1,clr="green"},[4]={row=row+1,col=col,clr="green"}} end,
  [2]=function (row,col) return {shape="t",position=2,[1]={row=row-1,col=col,clr="green"},[2]={row=row,col=col,clr="green"},[3]={row=row+1,col=col,clr="green"},[4]={row=row,col=col-1,clr="green"}} end,
  [3]=function (row,col) return {shape="t",position=3,[1]={row=row,col=col+1,clr="green"},[2]={row=row,col=col,clr="green"},[3]={row=row,col=col-1,clr="green"},[4]={row=row-1,col=col,clr="green"}} end,
  [4]=function (row,col) return {shape="t",position=4,[1]={row=row+1,col=col,clr="green"},[2]={row=row,col=col,clr="green"},[3]={row=row-1,col=col,clr="green"},[4]={row=row,col=col+1,clr="green"}} end,
 },
 j={
  [1]=function (row,col) return {shape="j",position=1,[1]={row=row,col=col-1,clr="pink"},[2]={row=row,col=col,clr="pink"},[3]={row=row,col=col+1,clr="pink"},[4]={row=row+1,col=col+1,clr="pink"}} end,  
  [2]=function (row,col) return {shape="j",position=2,[1]={row=row-1,col=col,clr="pink"},[2]={row=row,col=col,clr="pink"},[3]={row=row+1,col=col,clr="pink"},[4]={row=row+1,col=col-1,clr="pink"}} end,  
  [3]=function (row,col) return {shape="j",position=3,[1]={row=row,col=col+1,clr="pink"},[2]={row=row,col=col,clr="pink"},[3]={row=row,col=col-1,clr="pink"},[4]={row=row-1,col=col-1,clr="pink"}} end,  
  [4]=function (row,col) return {shape="j",position=4,[1]={row=row+1,col=col,clr="pink"},[2]={row=row,col=col,clr="pink"},[3]={row=row-1,col=col,clr="pink"},[4]={row=row-1,col=col+1,clr="pink"}} end,  
 },
 l={
  [1]=function (row,col) return {shape="l",position=1,[1]={row=row,col=col+1,clr="blue"},[2]={row=row,col=col,clr="blue"},[3]={row=row,col=col-1,clr="blue"},[4]={row=row+1,col=col-1,clr="blue"}} end,  
  [2]=function (row,col) return {shape="l",position=2,[1]={row=row+1,col=col,clr="blue"},[2]={row=row,col=col,clr="blue"},[3]={row=row-1,col=col,clr="blue"},[4]={row=row-1,col=col-1,clr="blue"}} end,  
  [3]=function (row,col) return {shape="l",position=3,[1]={row=row,col=col-1,clr="blue"},[2]={row=row,col=col,clr="blue"},[3]={row=row,col=col+1,clr="blue"},[4]={row=row-1,col=col+1,clr="blue"}} end,  
  [4]=function (row,col) return {shape="l",position=4,[1]={row=row-1,col=col,clr="blue"},[2]={row=row,col=col,clr="blue"},[3]={row=row+1,col=col,clr="blue"},[4]={row=row+1,col=col+1,clr="blue"}} end,  
 },
 s={
  [1]=function (row,col) return {shape="s",position=1,[1]={row=row,col=col+1,clr="yellow"},[2]={row=row,col=col,clr="yellow"},[3]={row=row+1,col=col,clr="yellow"},[4]={row=row+1,col=col-1,clr="yellow"}} end,  
  [2]=function (row,col) return {shape="s",position=2,[1]={row=row+1,col=col,clr="yellow"},[2]={row=row,col=col,clr="yellow"},[3]={row=row,col=col-1,clr="yellow"},[4]={row=row-1,col=col-1,clr="yellow"}} end,  
 },
 z={
  [1]=function (row,col) return {shape="z",position=1,[1]={row=row,col=col-1,clr="grey"},[2]={row=row,col=col,clr="grey"},[3]={row=row+1,col=col,clr="grey"},[4]={row=row+1,col=col+1,clr="grey"}} end,  
  [2]=function (row,col) return {shape="z",position=2,[1]={row=row-1,col=col,clr="grey"},[2]={row=row,col=col,clr="grey"},[3]={row=row,col=col-1,clr="grey"},[4]={row=row+1,col=col-1,clr="grey"}} end,  
 },
}

function can_rotate(piece,grid)
 for dir in all({‚¨ÜÔ∏è,‚¨áÔ∏è}) do
  if collision(piece,grid,dir) then
   return false
  end
 end
 return true
end

function collision(piece,grid,dir)
 for b in all(piece) do
  if dir==‚¨ÖÔ∏è
   and (b.col<1 or grid[b.row][b.col-1]~=colors["blank"]) then
    return true
  elseif dir==‚û°Ô∏è
   and (b.col>10 or grid[b.row][b.col+1]~=colors["blank"]) then
    return true
  elseif dir==‚¨áÔ∏è
   and (b.row==15 or grid[b.row+1][b.col]~=colors["blank"]) then
    return true
  elseif dir==‚¨ÜÔ∏è and b.row<1 then
   return true
  end
 end
 return false
end

function delete_lines(state)
 local deletable_rows={}
 local _grid=state.grid 
 for row=1,15 do
  if row_is_full(_grid[row]) then
   add(deletable_rows,row)
  end
 end

 for row in all(deletable_rows) do
  for col=1,10 do
   _grid[row][col]=colors["blank"]
  end
 end
 
 for r in all(deletable_rows) do
  for row=r,1,-1 do
   if not row_is_empty(_grid[row]) then
    for col=1,10 do
     _grid[row+1][col]=_grid[row][col]
     _grid[row][col]=colors["blank"]
    end
   end
  end 
 end

 local _lines=state.lines+#deletable_rows
 return _grid,_lines
end

function drop(state)
 local ap=state.active_piece
 if state.time%(30-state.level)==0
  and not collision(ap,state.grid,‚¨áÔ∏è) then
  ap=move_down(ap,state.grid)
 end
 return ap
end

function get_bottom_block(piece)
 local bottom=piece[1]
 for b in all(piece) do
  if b.row<bottom.row then
   bottom=b
  end
 end
 return bottom
end

function get_top_row(grid,col)
 for r=1,15 do
  if grid[r][col]~=colors["blank"] then
   return r
  end
 end
 return 16
end

function move_down(piece,grid)
 local bottom=get_bottom_block(piece)
 if not collision(piece,grid,‚¨áÔ∏è) then
  for b in all(piece) do
   b.row+=1
  end
 end
 return piece
end

function move_left(piece,grid)
 if not collision(piece,grid,‚¨ÖÔ∏è) then
	  for b in all(piece) do
 	  b.col-=1
 	end
 end
 return piece
end

function move_right(piece,grid)
 if not collision(piece,grid,‚û°Ô∏è) then
  for b in all(piece) do
   b.col+=1
  end
 end
 return piece
end

function new_grid()
 grid={}
 for row=1,15 do
  grid[row]={}
  for col=1,10 do
   grid[row][col]=colors["blank"]
  end
 end
 return grid
end

function new_piece(row,col,shape)
 piece=pieces[shape][1](row,col)
 return piece
end

function persist(piece,grid)
 local _grid=grid
 for b in all(piece) do
  _grid[b.row][b.col]=colors[b.clr]
 end
 return _grid
end

function random_shape(curr_shape)
 repeat
  new_shape=rnd({"i","o","t","j","l","s","z"})
 until new_shape~=curr_shape
 return new_shape
end

function rotate_clockwise(piece,grid)
 --[[
 note: offsets are based on the
 invariant block of each piece,
 which differs from shape to
 shape, but pieces have been set
 up so that piece[2] is always
 the invariant one.
 --]]
 local shp=piece.shape
 local pos=piece.position
 local row=piece[2].row
 local col=piece[2].col

 if pos==#pieces[shp] then
  pos=1
 else
  pos+=1
 end
 piece=pieces[shp][pos](row,col)
 
 return piece
end

function rotate_counterclockwise(piece,grid)
 --[[
 note: offsets are based on the
 invariant block of each piece,
 which differs from shape to
 shape, but pieces have been set
 up so that piece[2] is always
 the invariant one.
 --]]
 local shp=piece.shape
 local pos=piece.position
 local row=piece[2].row
 local col=piece[2].col

 if pos==1 then
  pos=#pieces[shp]
 else
  pos-=1
 end
 piece=pieces[shp][pos](row,col)
 
 return piece
end

function row_is_empty(row)
 for col=1,10 do
  if row[col]~=colors["blank"] then
   return false
  end
 end
 return true
end

function row_is_full(row)
 for col=1,10 do
  if row[col]==colors["blank"] then
   return false
  end
 end
 return true
end
__gfx__
000000000111111002222220033333300444444005555550099999900eeeeee00000000000000000000000000000000000000000000000000000000000000000
00000000177cccc1277eeee2377bbbb34774444457766665977aaaa9e77ffffe0055550000055000000550000000000000000000000000000000000000000000
007007001771c1c1277222e237733bb34779994457755665977999a9e77ffffe0500005000055000005555000000000000000000000000000000000000000000
000770001c1c1cc12e2ee2e23b3bb3b344999944565555659a9999a9effeeffe0500005000055000050550500000000000000000000000000000000000000000
000770001cc1c1c12e2ee2e23b3bb3b344999944565555659a9999a9effeeffe0500005005055050000550000000000000000000000000000000000000000000
007007001c1c1cc12e2222e23bb33bb344999944566556659a9999a9effffffe0500005000555500000550000000000000000000000000000000000000000000
000000001cccccc12eeeeee23bbbbbb344444444566666659aaaaaa9effffffe0055550000055000000550000000000000000000000000000000000000000000
000000000111111002222220033333300444444005555550099999900eeeeee00000000000000000000000000000000000000000000000000000000000000000
55555555556666556666665566666655666666555566665566556655666666556666665500000000000000000000000000000000000000000000000000000000
55555555556666556666665566666655666666555566665566556655666666556666665500000000000000000000000000000000000000000000000000000000
55555555665555556655665566556655665555556655665566556655665555556655665500000000000000000000000000000000000000000000000000000000
55555555665555556655665566556655666655556655665566556655666655556666555500000000000000000000000000000000000000000000000000000000
55555555665566556666665566556655666655556655665566556655666655556666555500000000000000000000000000000000000000000000000000000000
55555555665566556666665566556655665555556655665566556655665555556655665500000000000000000000000000000000000000000000000000000000
55555555666666556655665566556655666666556666555555665555666666556655665500000000000000000000000000000000000000000000000000000000
55555555666666556655665566556655666666556666555555665555666666556655665500000000000000000000000000000000000000000000000000000000
00000000666666006666000066666600666666000066660066666600666666006600660066666600666666006666660000666600000000000000000000000000
00000000666666006666000066666600666666000066660066666600666666006600660066666600666666006666660000666600000000000000000000000000
00000000660066006600660000660000006600006600000066006600660066006600660000660000660066000066000066000000000000000000000000000000
00000000660066006600660000660000006600006600000066660000660066006600660000660000666600000066000066666600000000000000000000000000
00000000666666006600660000660000006600006600660066660000666666006600660000660000666600000066000066666600000000000000000000000000
00000000666666006600660000660000006600006600660066006600666666006600660000660000660066000066000000006600000000000000000000000000
00000000660066006600660000660000666666006666660066006600660066000066000000660000660066006666660066660000000000000000000000000000
00000000660066006600660000660000666666006666660066006600660066000066000000660000660066006666660066660000000000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000006000666060606660600000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006000600060606000600000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006000660060606600600000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006000600066606000600000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006660666006006660666000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000006660000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006060000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006060000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006060000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006660000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000006000666066006660066000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006000060060606000600000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006000060060606600666000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006000060060606000006000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006660666060606660660000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000005555550055555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000055550057766665577666650055550000555500005555000055550000555500000000006600000000000000000000000000000000000000
05000050050000500500005057755665577556650500005005000050050000500500005005000050000000000600000000000000000000000000000000000000
05000050050000500500005056555565565555650500005005000050050000500500005005000050000000000600000000000000000000000000000000000000
05000050050000500500005056555565565555650500005005000050050000500500005005000050000000000600000000000000000000000000000000000000
05000050050000500500005056655665566556650500005005000050050000500500005005000050000000006660000000000000000000000000000000000000
00555500005555000055550056666665566666650055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
00000000000000000000000005555550055555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000055555500555555000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000055550000555500577666655776666500555500005555000055550000555500000000000000000000000000000000000000000000000000
05000050050000500500005005000050577556655775566505000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050565555655655556505000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050565555655655556505000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050566556655665566505000050050000500500005005000050000000000000000000000000000000000000000000000000
00555500005555000055550000555500566666655666666500555500005555000055550000555500000000000000000000000000000000000000000000000000
00000000000000000000000000000000055555500555555000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000006660666066606660000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000600060066606000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000600060060606600000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000600060060606000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000600666060606660000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000006060000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006060000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006660000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000060000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000060000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000006600666060606660000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006060600060600600000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006060660006000600000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006060600060600600000000000000000000000000
05000050050000500500005005000050050000500500005005000050050000500500005005000050000000006060666060600600000000000000000000000000
00555500005555000055550000555500005555000055550000555500005555000055550000555500000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000555555000000000000000000999999000000000000000000000000000000000000000000999999009999990000000000000000000000000
0055550000555500577666650055550000555500977aaaa90055550000555500005555000055550000000000977aaaa9977aaaa9000000000000000000000000
0500005005000050577556650500005005000050977999a90500005005000050050000500500005000000000977999a9977999a9000000000000000000000000
05000050050000505655556505000050050000509a9999a905000050050000500500005005000050000000009a9999a99a9999a9000000000000000000000000
05000050050000505655556505000050050000509a9999a905000050050000500500005005000050000000009a9999a99a9999a9000000000000000000000000
05000050050000505665566505000050050000509a9999a905000050050000500500005005000050000000009a9999a99a9999a9000000000000000000000000
00555500005555005666666500555500005555009aaaaaa900555500005555000055550000555500000000009aaaaaa99aaaaaa9000000000000000000000000
00000000000000000555555000000000000000000999999000000000000000000000000000000000000000000999999009999990000000000000000000000000
01111110055555500555555000000000000000000999999009999990000000000eeeeee000000000099999900999999000000000000000000000000000000000
177cccc157766665577666650055550000555500977aaaa9977aaaa900555500e77ffffe00555500977aaaa9977aaaa900000000000000000000000000000000
1771c1c157755665577556650500005005000050977999a9977999a905000050e77ffffe05000050977999a9977999a900000000000000000000000000000000
1c1c1cc1565555655655556505000050050000509a9999a99a9999a905000050effeeffe050000509a9999a99a9999a900000000000000000000000000000000
1cc1c1c1565555655655556505000050050000509a9999a99a9999a905000050effeeffe050000509a9999a99a9999a900000000000000000000000000000000
1c1c1cc1566556655665566505000050050000509a9999a99a9999a905000050effffffe050000509a9999a99a9999a900000000000000000000000000000000
1cccccc1566666655666666500555500005555009aaaaaa99aaaaaa900555500effffffe005555009aaaaaa99aaaaaa900000000000000000000000000000000
01111110055555500555555000000000000000000999999009999990000000000eeeeee000000000099999900999999000000000000000000000000000000000
01111110055555500222222002222220000000000333333009999990000000000eeeeee000000000000000000000000000000000000000000000000000000000
177cccc157766665277eeee2277eeee200555500377bbbb3977aaaa900555500e77ffffe00555500000000000000000000000000000000000000000000000000
1771c1c157755665277222e2277222e20500005037733bb3977999a905000050e77ffffe05000050000000000000000000000000000000000000000000000000
1c1c1cc1565555652e2ee2e22e2ee2e2050000503b3bb3b39a9999a905000050effeeffe05000050000000000000000000000000000000000000000000000000
1cc1c1c1565555652e2ee2e22e2ee2e2050000503b3bb3b39a9999a905000050effeeffe05000050000000000000000000000000000000000000000000000000
1c1c1cc1566556652e2222e22e2222e2050000503bb33bb39a9999a905000050effffffe05000050000000000000000000000000000000000000000000000000
1cccccc1566666652eeeeee22eeeeee2005555003bbbbbb39aaaaaa900555500effffffe00555500000000000000000000000000000000000000000000000000
01111110055555500222222002222220000000000333333009999990000000000eeeeee000000000000000000000000000000000000000000000000000000000
011111100111111002222220022222200333333003333330033333300eeeeee00eeeeee000000000000000000000000000000000000000000000000000000000
177cccc1177cccc1277eeee2277eeee2377bbbb3377bbbb3377bbbb3e77ffffee77ffffe00555500000000000000000000000000000000000000000000000000
1771c1c11771c1c1277222e2277222e237733bb337733bb337733bb3e77ffffee77ffffe05000050000000000000000000000000000000000000000000000000
1c1c1cc11c1c1cc12e2ee2e22e2ee2e23b3bb3b33b3bb3b33b3bb3b3effeeffeeffeeffe05000050000000000000000000000000000000000000000000000000
1cc1c1c11cc1c1c12e2ee2e22e2ee2e23b3bb3b33b3bb3b33b3bb3b3effeeffeeffeeffe05000050000000000000000000000000000000000000000000000000
1c1c1cc11c1c1cc12e2222e22e2222e23bb33bb33bb33bb33bb33bb3effffffeeffffffe05000050000000000000000000000000000000000000000000000000
1cccccc11cccccc12eeeeee22eeeeee23bbbbbb33bbbbbb33bbbbbb3effffffeeffffffe00555500000000000000000000000000000000000000000000000000
011111100111111002222220022222200333333003333330033333300eeeeee00eeeeee000000000000000000000000000000000000000000000000000000000

__map__
0000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
